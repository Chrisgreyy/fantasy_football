"""Add enhanced league configuration and real_team column

Revision ID: 116c1dff8d9e
Revises: c9b6fd2a7d3e
Create Date: 2025-07-22 20:31:51.765721

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '116c1dff8d9e'
down_revision: Union[str, None] = 'c9b6fd2a7d3e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, handle existing fixtures - add kickoff_time as nullable, then update, then make non-nullable
    op.add_column('fixtures', sa.Column('kickoff_time', sa.DateTime(), nullable=True))
    
    # Update existing fixtures with a default kickoff time (using current date column if exists)
    connection = op.get_bind()
    connection.execute(sa.text("UPDATE fixtures SET kickoff_time = COALESCE(date, NOW()) WHERE kickoff_time IS NULL"))
    
    # Now make it non-nullable
    op.alter_column('fixtures', 'kickoff_time', nullable=False)
    
    op.add_column('fixtures', sa.Column('home_score', sa.Integer(), nullable=True))
    op.add_column('fixtures', sa.Column('away_score', sa.Integer(), nullable=True))
    
    # Drop foreign key and columns safely
    try:
        op.drop_constraint('fixtures_league_id_fkey', 'fixtures', type_='foreignkey')
    except:
        pass  # Constraint might not exist
    
    # Check if columns exist before dropping
    try:
        op.drop_column('fixtures', 'league_id')
    except:
        pass
    try:
        op.drop_column('fixtures', 'date')
    except:
        pass
        
    # Add league configuration columns with defaults
    op.add_column('leagues', sa.Column('budget', sa.Float(), nullable=True, server_default='100.0'))
    op.add_column('leagues', sa.Column('max_players_per_real_team', sa.Integer(), nullable=True, server_default='3'))
    op.add_column('leagues', sa.Column('max_teams', sa.Integer(), nullable=True, server_default='20'))
    op.add_column('leagues', sa.Column('max_goalkeepers', sa.Integer(), nullable=True, server_default='2'))
    op.add_column('leagues', sa.Column('max_defenders', sa.Integer(), nullable=True, server_default='5'))
    op.add_column('leagues', sa.Column('max_midfielders', sa.Integer(), nullable=True, server_default='5'))
    op.add_column('leagues', sa.Column('max_forwards', sa.Integer(), nullable=True, server_default='3'))
    op.add_column('leagues', sa.Column('total_squad_size', sa.Integer(), nullable=True, server_default='15'))
    op.add_column('leagues', sa.Column('free_transfers_per_gameweek', sa.Integer(), nullable=True, server_default='1'))
    op.add_column('leagues', sa.Column('transfer_penalty_points', sa.Integer(), nullable=True, server_default='4'))
    op.add_column('leagues', sa.Column('max_transfers_per_gameweek', sa.Integer(), nullable=True, server_default='5'))
    op.add_column('leagues', sa.Column('points_per_goal_forward', sa.Integer(), nullable=True, server_default='4'))
    op.add_column('leagues', sa.Column('points_per_goal_midfielder', sa.Integer(), nullable=True, server_default='5'))
    op.add_column('leagues', sa.Column('points_per_goal_defender', sa.Integer(), nullable=True, server_default='6'))
    op.add_column('leagues', sa.Column('points_per_goal_goalkeeper', sa.Integer(), nullable=True, server_default='6'))
    op.add_column('leagues', sa.Column('points_per_assist', sa.Integer(), nullable=True, server_default='3'))
    op.add_column('leagues', sa.Column('points_per_clean_sheet', sa.Integer(), nullable=True, server_default='4'))
    op.add_column('leagues', sa.Column('points_per_yellow_card', sa.Integer(), nullable=True, server_default='-1'))
    op.add_column('leagues', sa.Column('points_per_red_card', sa.Integer(), nullable=True, server_default='-3'))
    op.add_column('leagues', sa.Column('points_per_own_goal', sa.Integer(), nullable=True, server_default='-2'))
    op.add_column('leagues', sa.Column('points_per_penalty_save', sa.Integer(), nullable=True, server_default='5'))
    op.add_column('leagues', sa.Column('points_per_penalty_miss', sa.Integer(), nullable=True, server_default='-2'))
    op.add_column('leagues', sa.Column('allow_wildcards', sa.Boolean(), nullable=True, server_default='true'))
    op.add_column('leagues', sa.Column('allow_bench_boost', sa.Boolean(), nullable=True, server_default='true'))
    op.add_column('leagues', sa.Column('allow_triple_captain', sa.Boolean(), nullable=True, server_default='true'))
    
    # Update existing leagues with default values
    connection.execute(sa.text("""
        UPDATE leagues SET 
            budget = COALESCE(budget, 100.0),
            max_players_per_real_team = COALESCE(max_players_per_real_team, 3),
            max_teams = COALESCE(max_teams, 20),
            max_goalkeepers = COALESCE(max_goalkeepers, 2),
            max_defenders = COALESCE(max_defenders, 5),
            max_midfielders = COALESCE(max_midfielders, 5),
            max_forwards = COALESCE(max_forwards, 3),
            total_squad_size = COALESCE(total_squad_size, 15),
            free_transfers_per_gameweek = COALESCE(free_transfers_per_gameweek, 1),
            transfer_penalty_points = COALESCE(transfer_penalty_points, 4),
            max_transfers_per_gameweek = COALESCE(max_transfers_per_gameweek, 5),
            points_per_goal_forward = COALESCE(points_per_goal_forward, 4),
            points_per_goal_midfielder = COALESCE(points_per_goal_midfielder, 5),
            points_per_goal_defender = COALESCE(points_per_goal_defender, 6),
            points_per_goal_goalkeeper = COALESCE(points_per_goal_goalkeeper, 6),
            points_per_assist = COALESCE(points_per_assist, 3),
            points_per_clean_sheet = COALESCE(points_per_clean_sheet, 4),
            points_per_yellow_card = COALESCE(points_per_yellow_card, -1),
            points_per_red_card = COALESCE(points_per_red_card, -3),
            points_per_own_goal = COALESCE(points_per_own_goal, -2),
            points_per_penalty_save = COALESCE(points_per_penalty_save, 5),
            points_per_penalty_miss = COALESCE(points_per_penalty_miss, -2),
            allow_wildcards = COALESCE(allow_wildcards, true),
            allow_bench_boost = COALESCE(allow_bench_boost, true),
            allow_triple_captain = COALESCE(allow_triple_captain, true)
    """))
    
    op.add_column('player_stats', sa.Column('fantasy_points', sa.Integer(), nullable=True))
    try:
        op.drop_column('player_stats', 'points')
    except:
        pass
        
    # Handle players table - add real_team as nullable first, then update, then make non-nullable
    op.add_column('players', sa.Column('real_team', sa.String(), nullable=True))
    
    # Update existing players with their team value
    connection.execute(sa.text("UPDATE players SET real_team = team WHERE real_team IS NULL"))
    
    # Make real_team non-nullable
    op.alter_column('players', 'real_team', nullable=False)
    
    op.add_column('players', sa.Column('shirt_number', sa.Integer(), nullable=True))
    try:
        op.drop_column('players', 'team')
    except:
        pass
        
    # Handle team_players table
    op.add_column('team_players', sa.Column('joined_at', sa.DateTime(), nullable=True, server_default=sa.text('NOW()')))
    op.add_column('team_players', sa.Column('left_at', sa.DateTime(), nullable=True))
    op.add_column('team_players', sa.Column('purchase_price', sa.Float(), nullable=True))
    
    # Set default purchase_price for existing team_players
    connection.execute(sa.text("""
        UPDATE team_players 
        SET purchase_price = 5.0, 
            joined_at = COALESCE(created_at, NOW())
        WHERE purchase_price IS NULL
    """))
    
    # Make purchase_price non-nullable
    op.alter_column('team_players', 'purchase_price', nullable=False)
    
    try:
        op.drop_column('team_players', 'created_at')
    except:
        pass
        
    # Teams table updates
    op.add_column('teams', sa.Column('league_id', sa.Integer(), nullable=True))
    op.add_column('teams', sa.Column('vice_captain_id', sa.Integer(), nullable=True))
    op.add_column('teams', sa.Column('current_budget', sa.Float(), nullable=True, server_default='100.0'))
    
    # Set default league_id and current_budget for existing teams
    connection.execute(sa.text("""
        UPDATE teams 
        SET league_id = 1, 
            current_budget = COALESCE(current_budget, 100.0)
        WHERE league_id IS NULL
    """))
    
    # Make league_id non-nullable
    op.alter_column('teams', 'league_id', nullable=False)
    
    # Create foreign keys
    op.create_foreign_key(None, 'teams', 'players', ['vice_captain_id'], ['id'])
    op.create_foreign_key(None, 'teams', 'leagues', ['league_id'], ['id'])
    
    # Transfers table updates
    op.add_column('transfers', sa.Column('points_cost', sa.Integer(), nullable=True, server_default='0'))
    op.add_column('transfers', sa.Column('money_out', sa.Float(), nullable=True))
    op.add_column('transfers', sa.Column('money_in', sa.Float(), nullable=True))
    op.add_column('transfers', sa.Column('money_change', sa.Float(), nullable=True))
    op.add_column('transfers', sa.Column('is_free_transfer', sa.Boolean(), nullable=True, server_default='true'))
    op.add_column('transfers', sa.Column('transfer_number_in_gameweek', sa.Integer(), nullable=True, server_default='1'))
    
    # Update existing transfers with default values
    connection.execute(sa.text("""
        UPDATE transfers SET 
            money_out = COALESCE(money_out, cost, 5.0),
            money_in = COALESCE(money_in, cost, 5.0),
            money_change = COALESCE(money_change, 0.0),
            points_cost = COALESCE(points_cost, 0),
            is_free_transfer = COALESCE(is_free_transfer, true),
            transfer_number_in_gameweek = COALESCE(transfer_number_in_gameweek, 1)
    """))
    
    # Make required columns non-nullable
    op.alter_column('transfers', 'money_out', nullable=False)
    op.alter_column('transfers', 'money_in', nullable=False)
    op.alter_column('transfers', 'money_change', nullable=False)
    op.alter_column('transfers', 'transfer_number_in_gameweek', nullable=False)
    
    try:
        op.drop_column('transfers', 'cost')
    except:
        pass
    # ### end Alembic commands ###
    op.add_column('leagues', sa.Column('allow_wildcards', sa.Boolean(), nullable=True))
    op.add_column('leagues', sa.Column('allow_bench_boost', sa.Boolean(), nullable=True))
    op.add_column('leagues', sa.Column('allow_triple_captain', sa.Boolean(), nullable=True))
    op.add_column('player_stats', sa.Column('fantasy_points', sa.Integer(), nullable=True))
    op.drop_column('player_stats', 'points')
    op.add_column('players', sa.Column('real_team', sa.String(), nullable=False))
    op.add_column('players', sa.Column('shirt_number', sa.Integer(), nullable=True))
    op.drop_column('players', 'team')
    op.add_column('team_players', sa.Column('joined_at', sa.DateTime(), nullable=True))
    op.add_column('team_players', sa.Column('left_at', sa.DateTime(), nullable=True))
    op.add_column('team_players', sa.Column('purchase_price', sa.Float(), nullable=False))
    op.drop_column('team_players', 'created_at')
    op.add_column('teams', sa.Column('league_id', sa.Integer(), nullable=False))
    op.add_column('teams', sa.Column('vice_captain_id', sa.Integer(), nullable=True))
    op.add_column('teams', sa.Column('current_budget', sa.Float(), nullable=True))
    op.create_foreign_key(None, 'teams', 'players', ['vice_captain_id'], ['id'])
    op.create_foreign_key(None, 'teams', 'leagues', ['league_id'], ['id'])
    op.add_column('transfers', sa.Column('points_cost', sa.Integer(), nullable=True))
    op.add_column('transfers', sa.Column('money_out', sa.Float(), nullable=False))
    op.add_column('transfers', sa.Column('money_in', sa.Float(), nullable=False))
    op.add_column('transfers', sa.Column('money_change', sa.Float(), nullable=False))
    op.add_column('transfers', sa.Column('is_free_transfer', sa.Boolean(), nullable=True))
    op.add_column('transfers', sa.Column('transfer_number_in_gameweek', sa.Integer(), nullable=False))
    op.drop_column('transfers', 'cost')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('transfers', sa.Column('cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_column('transfers', 'transfer_number_in_gameweek')
    op.drop_column('transfers', 'is_free_transfer')
    op.drop_column('transfers', 'money_change')
    op.drop_column('transfers', 'money_in')
    op.drop_column('transfers', 'money_out')
    op.drop_column('transfers', 'points_cost')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_column('teams', 'current_budget')
    op.drop_column('teams', 'vice_captain_id')
    op.drop_column('teams', 'league_id')
    op.add_column('team_players', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('team_players', 'purchase_price')
    op.drop_column('team_players', 'left_at')
    op.drop_column('team_players', 'joined_at')
    op.add_column('players', sa.Column('team', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('players', 'shirt_number')
    op.drop_column('players', 'real_team')
    op.add_column('player_stats', sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('player_stats', 'fantasy_points')
    op.drop_column('leagues', 'allow_triple_captain')
    op.drop_column('leagues', 'allow_bench_boost')
    op.drop_column('leagues', 'allow_wildcards')
    op.drop_column('leagues', 'points_per_penalty_miss')
    op.drop_column('leagues', 'points_per_penalty_save')
    op.drop_column('leagues', 'points_per_own_goal')
    op.drop_column('leagues', 'points_per_red_card')
    op.drop_column('leagues', 'points_per_yellow_card')
    op.drop_column('leagues', 'points_per_clean_sheet')
    op.drop_column('leagues', 'points_per_assist')
    op.drop_column('leagues', 'points_per_goal_goalkeeper')
    op.drop_column('leagues', 'points_per_goal_defender')
    op.drop_column('leagues', 'points_per_goal_midfielder')
    op.drop_column('leagues', 'points_per_goal_forward')
    op.drop_column('leagues', 'max_transfers_per_gameweek')
    op.drop_column('leagues', 'transfer_penalty_points')
    op.drop_column('leagues', 'free_transfers_per_gameweek')
    op.drop_column('leagues', 'total_squad_size')
    op.drop_column('leagues', 'max_forwards')
    op.drop_column('leagues', 'max_midfielders')
    op.drop_column('leagues', 'max_defenders')
    op.drop_column('leagues', 'max_goalkeepers')
    op.drop_column('leagues', 'max_teams')
    op.drop_column('leagues', 'max_players_per_real_team')
    op.drop_column('leagues', 'budget')
    op.add_column('fixtures', sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('fixtures', sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('fixtures_league_id_fkey', 'fixtures', 'leagues', ['league_id'], ['id'])
    op.drop_column('fixtures', 'away_score')
    op.drop_column('fixtures', 'home_score')
    op.drop_column('fixtures', 'kickoff_time')
    # ### end Alembic commands ###

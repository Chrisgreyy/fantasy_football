"""Enhanced fantasy football schema with configurable leagues

Revision ID: 2472db89592c
Revises: c9b6fd2a7d3e
Create Date: 2025-07-22 20:36:30.857059

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2472db89592c'
down_revision: Union[str, None] = 'c9b6fd2a7d3e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Handle fixtures table changes carefully to avoid NOT NULL violations
    # First add nullable kickoff_time column
    op.add_column('fixtures', sa.Column('kickoff_time', sa.DateTime(), nullable=True))
    
    # Update existing fixtures with a default kickoff time (copy from date column if it exists)
    op.execute("UPDATE fixtures SET kickoff_time = COALESCE(date, NOW()) WHERE kickoff_time IS NULL")
    
    # Now make kickoff_time NOT NULL
    op.alter_column('fixtures', 'kickoff_time', nullable=False)
    
    op.add_column('fixtures', sa.Column('home_score', sa.Integer(), nullable=True))
    op.add_column('fixtures', sa.Column('away_score', sa.Integer(), nullable=True))
    op.drop_constraint('fixtures_league_id_fkey', 'fixtures', type_='foreignkey')
    op.drop_column('fixtures', 'league_id')
    op.drop_column('fixtures', 'date')
    op.add_column('leagues', sa.Column('budget', sa.Float(), nullable=True))
    op.add_column('leagues', sa.Column('max_players_per_real_team', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('max_teams', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('max_goalkeepers', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('max_defenders', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('max_midfielders', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('max_forwards', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('total_squad_size', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('free_transfers_per_gameweek', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('transfer_penalty_points', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('max_transfers_per_gameweek', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_goal_forward', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_goal_midfielder', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_goal_defender', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_goal_goalkeeper', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_assist', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_clean_sheet', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_yellow_card', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_red_card', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_own_goal', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_penalty_save', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('points_per_penalty_miss', sa.Integer(), nullable=True))
    op.add_column('leagues', sa.Column('allow_wildcards', sa.Boolean(), nullable=True))
    op.add_column('leagues', sa.Column('allow_bench_boost', sa.Boolean(), nullable=True))
    op.add_column('leagues', sa.Column('allow_triple_captain', sa.Boolean(), nullable=True))
    op.add_column('player_stats', sa.Column('fantasy_points', sa.Integer(), nullable=True))
    op.drop_column('player_stats', 'points')
    
    # Handle players table changes carefully
    # First add nullable real_team column
    op.add_column('players', sa.Column('real_team', sa.String(), nullable=True))
    
    # Update existing players with their current team value
    op.execute("UPDATE players SET real_team = team WHERE real_team IS NULL")
    
    # Now make real_team NOT NULL
    op.alter_column('players', 'real_team', nullable=False)
    
    op.add_column('players', sa.Column('shirt_number', sa.Integer(), nullable=True))
    op.drop_column('players', 'team')
    op.add_column('team_players', sa.Column('joined_at', sa.DateTime(), nullable=True))
    op.add_column('team_players', sa.Column('left_at', sa.DateTime(), nullable=True))
    
    # Handle purchase_price carefully - add as nullable first
    op.add_column('team_players', sa.Column('purchase_price', sa.Float(), nullable=True))
    
    # Set default purchase price for existing team_players (use player's current price)
    op.execute("""
        UPDATE team_players 
        SET purchase_price = players.price 
        FROM players 
        WHERE team_players.player_id = players.id 
        AND team_players.purchase_price IS NULL
    """)
    
    # Now make purchase_price NOT NULL
    op.alter_column('team_players', 'purchase_price', nullable=False)
    
    op.drop_column('team_players', 'created_at')
    # Handle teams table changes carefully
    # First add nullable league_id column
    op.add_column('teams', sa.Column('league_id', sa.Integer(), nullable=True))
    
    # Set a default league_id for existing teams (assuming league with id=1 exists)
    op.execute("UPDATE teams SET league_id = 1 WHERE league_id IS NULL")
    
    # Now make league_id NOT NULL
    op.alter_column('teams', 'league_id', nullable=False)
    
    op.add_column('teams', sa.Column('vice_captain_id', sa.Integer(), nullable=True))
    op.add_column('teams', sa.Column('current_budget', sa.Float(), nullable=True))
    op.create_foreign_key(None, 'teams', 'players', ['vice_captain_id'], ['id'])
    op.create_foreign_key(None, 'teams', 'leagues', ['league_id'], ['id'])
    op.add_column('transfers', sa.Column('points_cost', sa.Integer(), nullable=True))
    
    # Handle transfers table changes carefully
    # Add nullable columns first
    op.add_column('transfers', sa.Column('money_out', sa.Float(), nullable=True))
    op.add_column('transfers', sa.Column('money_in', sa.Float(), nullable=True))
    op.add_column('transfers', sa.Column('money_change', sa.Float(), nullable=True))
    op.add_column('transfers', sa.Column('transfer_number_in_gameweek', sa.Integer(), nullable=True))
    
    # Set default values for existing transfers
    op.execute("""
        UPDATE transfers 
        SET money_out = COALESCE(cost, 0.0),
            money_in = 0.0,
            money_change = -COALESCE(cost, 0.0),
            transfer_number_in_gameweek = 1
        WHERE money_out IS NULL
    """)
    
    # Now make required columns NOT NULL
    op.alter_column('transfers', 'money_out', nullable=False)
    op.alter_column('transfers', 'money_in', nullable=False)
    op.alter_column('transfers', 'money_change', nullable=False)
    op.alter_column('transfers', 'transfer_number_in_gameweek', nullable=False)
    
    op.add_column('transfers', sa.Column('is_free_transfer', sa.Boolean(), nullable=True))
    op.drop_column('transfers', 'cost')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('transfers', sa.Column('cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_column('transfers', 'transfer_number_in_gameweek')
    op.drop_column('transfers', 'is_free_transfer')
    op.drop_column('transfers', 'money_change')
    op.drop_column('transfers', 'money_in')
    op.drop_column('transfers', 'money_out')
    op.drop_column('transfers', 'points_cost')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_column('teams', 'current_budget')
    op.drop_column('teams', 'vice_captain_id')
    op.drop_column('teams', 'league_id')
    op.add_column('team_players', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('team_players', 'purchase_price')
    op.drop_column('team_players', 'left_at')
    op.drop_column('team_players', 'joined_at')
    op.add_column('players', sa.Column('team', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('players', 'shirt_number')
    op.drop_column('players', 'real_team')
    op.add_column('player_stats', sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('player_stats', 'fantasy_points')
    op.drop_column('leagues', 'allow_triple_captain')
    op.drop_column('leagues', 'allow_bench_boost')
    op.drop_column('leagues', 'allow_wildcards')
    op.drop_column('leagues', 'points_per_penalty_miss')
    op.drop_column('leagues', 'points_per_penalty_save')
    op.drop_column('leagues', 'points_per_own_goal')
    op.drop_column('leagues', 'points_per_red_card')
    op.drop_column('leagues', 'points_per_yellow_card')
    op.drop_column('leagues', 'points_per_clean_sheet')
    op.drop_column('leagues', 'points_per_assist')
    op.drop_column('leagues', 'points_per_goal_goalkeeper')
    op.drop_column('leagues', 'points_per_goal_defender')
    op.drop_column('leagues', 'points_per_goal_midfielder')
    op.drop_column('leagues', 'points_per_goal_forward')
    op.drop_column('leagues', 'max_transfers_per_gameweek')
    op.drop_column('leagues', 'transfer_penalty_points')
    op.drop_column('leagues', 'free_transfers_per_gameweek')
    op.drop_column('leagues', 'total_squad_size')
    op.drop_column('leagues', 'max_forwards')
    op.drop_column('leagues', 'max_midfielders')
    op.drop_column('leagues', 'max_defenders')
    op.drop_column('leagues', 'max_goalkeepers')
    op.drop_column('leagues', 'max_teams')
    op.drop_column('leagues', 'max_players_per_real_team')
    op.drop_column('leagues', 'budget')
    op.add_column('fixtures', sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('fixtures', sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('fixtures_league_id_fkey', 'fixtures', 'leagues', ['league_id'], ['id'])
    op.drop_column('fixtures', 'away_score')
    op.drop_column('fixtures', 'home_score')
    op.drop_column('fixtures', 'kickoff_time')
    # ### end Alembic commands ###
